import hashlib

"""
Алгоритм MD5 работает в три этапа: инициализация, основной цикл и финализация.

1. Инициализация: MD5 начинает с инициализации буфера, состоящего из четырех 32-битных регистров,
которые хранят промежуточные и конечные значения хеша. Эти регистры инициализируются определенными константами.

2. Основной цикл: Входные данные разбиваются на блоки по 512 бит. Для каждого блока выполняется ряд 
операций преобразования над регистрами буфера. Эти операции включают в себя битовые сдвиги, добавления и нелинейные функции
(такие как логические операции AND, OR, NOT). Преобразования выполняются в определенной последовательности, 
чтобы гарантировать, что каждый бит входных данных влияет на конечный результат.

3. Финализация: После обработки всех блоков входных данных последний блок дополняется до 512 бит,
если это необходимо, с добавлением длины исходных данных в конец последнего блока. Это обеспечивает, 
что даже небольшие изменения в данных приведут к значительно другому хешу. После обработки последнего блока
итоговое значение хеша формируется из конечного состояния четырех регистров.

В этом скрипте мы используется встроенный модуль Python 'hashlib' для реализации этих шагов без необходимости 
вручную реализовывать алгоритм MD5. Мы получаем текст от пользователя, преобразуем его в байты и используем
'md5' метод из 'hashlib' для генерации хеша.
"""

# Запрашиваем текст у пользователя
text = input("Введите текст для генерации MD5 хеша: ")

# Кодируем текст в байты, так как hashlib работает с байтами
encoded_text = text.encode()

# Создаем объект MD5
md5_hash = hashlib.md5(encoded_text)

# Выводим хеш в шестнадцатеричном формате
print("MD5 хеш введенного текста:", md5_hash.hexdigest())
