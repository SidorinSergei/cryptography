from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util import Counter

"""
Алгоритм 'Кузнечик' - это симметричный алгоритм блочного шифрования, принятый в качестве стандарта 
ГОСТ Р 34.12-2015. 'Кузнечик' обеспечивает высокий уровень безопасности и эффективность благодаря 
использованию принципов сети Фейстеля и сложным нелинейным преобразованиям.

Режим гаммирования (аналогичен режиму CTR в AES) позволяет использовать блочный шифр для шифрования данных 
произвольной длины. В этом режиме генерируется 'гамма' - последовательность псевдослучайных битов, которая 
затем складывается по модулю 2 (XOR) с исходными данными для получения зашифрованного текста. Для расшифровки 
производится та же операция XOR зашифрованного текста с той же 'гаммой'. Основное преимущество режима гаммирования 
в том, что для шифрования и расшифрования данных используется одна и та же операция.

Важным аспектом безопасности при использовании режима гаммирования является уникальность используемой 'гаммы' для 
каждого сообщения. В контексте CTR 'гамма' генерируется путем шифрования счетчика, который инкрементируется для 
каждого блока данных, обеспечивая уникальность 'гаммы'.

Пример ниже демонстрирует использование AES в режиме CTR для шифрования и расшифровки данных, 
что аналогично использованию 'Кузнечика' в режиме гаммирования.
"""

# Генерируем ключ шифрования
key = get_random_bytes(16)  # Случайный ключ для AES (для 'Кузнечика' ключ может иметь другой размер)

# Исходные данные для шифрования
data = b"Hello, World!"


def encrypt(data, key):
    """
    Шифрует данные в режиме гаммирования (CTR).

    :param data: Данные в виде байтовой строки для шифрования.
    :param key: Ключ шифрования.
    :return: Кортеж, содержащий инициализирующий вектор (nonce) и зашифрованные данные.
    """
    nonce = get_random_bytes(8)  # Инициализирующий вектор для AES (для 'Кузнечика' может отличаться)
    ctr = Counter.new(64, prefix=nonce)

    cipher = AES.new(key, AES.MODE_CTR, counter=ctr)
    encrypted_data = cipher.encrypt(data)

    return nonce, encrypted_data


def decrypt(nonce, encrypted_data, key):
    """
    Расшифровывает данные, используя AES в режиме CTR.

    :param nonce: инициализирующий вектор, использованный при шифровании.
    :param encrypted_data: зашифрованные данные.
    :param key: ключ шифрования.
    :return: расшифрованные данные.
    """
    ctr = Counter.new(64, prefix=nonce)

    # Создание объекта шифра
    cipher = AES.new(key, AES.MODE_CTR, counter=ctr)

    # Расшифровывание данных
    decrypted_data = cipher.decrypt(encrypted_data)

    return decrypted_data


# Демонстрация шифрования и расшифрования
key = get_random_bytes(16)  # Генерация случайного ключа
data = b"Hello, World!"

# Шифрование
nonce, encrypted_data = encrypt(data, key)
print(f"Encrypted data: {encrypted_data}")

# Расшифрование
decrypted_data = decrypt(nonce, encrypted_data, key)
print(f"Decrypted data: {decrypted_data}")
